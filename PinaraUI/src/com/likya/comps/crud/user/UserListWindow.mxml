<?xml version="1.0"?>
<!-- containers\spark\myComponents\ArrayEntryForm.mxml -->
<s:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:mx="library://ns.adobe.com/flex/mx" 
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   width="520" height="450" borderAlpha="1"
			   close="removeMe();" keyDown="titleWindow_keyDown(event);"
			   creationComplete="titlewindow1_creationCompleteHandler(event)" xmlns:user="com.likya.comps.crud.user.*" xmlns:userops="com.likya.pinara.services.userops.*">
	<s:layout>
		<s:VerticalLayout/>
	</s:layout>
	
	<fx:Script>
		<![CDATA[
			import com.likya.pinara.event.ResourceEvent;
			import com.likya.pinara.main.PinaraUI;
			import com.likya.pinara.utils.BasicAuthenticationHandler;
			import com.likya.pinara.utils.UserUtils;
			
			import mx.collections.XMLListCollection;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;

			private var currentDataItem:XML;

			protected function titlewindow1_creationCompleteHandler(event:FlexEvent):void {
				// Alert.show("htmlTextAsHTML : " + htmlTextAsHTML);
				// myText.textFlow = TextConverter.importToFlow(htmlTextAsHTML, TextConverter.PLAIN_TEXT_FORMAT);
				addEventListener(ResourceEvent.ROW_SELECTION_CHANGED, rowSelectionChangedHandler);
				addEventListener(ResourceEvent.REFRESH, pinaraJobListGrid_creationCompleteHandler);
			}
			
			private function rowSelectionChangedHandler(event:ResourceEvent):void {
				if(userListGrid.pinaraUserList.selectedIndex != -1) {
					uculEditUser.enabled = true;
					uculDeleteUser.enabled = true;
				} else {
					uculEditUser.enabled = false;
					uculDeleteUser.enabled = false;
				}
				currentDataItem = XML(event.object);
			}
			
			private function titleWindow_keyDown(evt:KeyboardEvent):void {
				if (evt.charCode == Keyboard.ESCAPE) {
					this.dispatchEvent(new CloseEvent(CloseEvent.CLOSE));
				}
			}
			
			private function removeMe():void {
				PopUpManager.removePopUp(this);
			}
			
			protected function pinaraJobListGrid_creationCompleteHandler(event:FlexEvent):void
			{
				refreshList();
			}
			
			public function refreshList():void {
				BasicAuthenticationHandler.authAndCall(userOpsService, "userlist", "dummyforsecurity");
				
				// pinaraJobListGrid.jobListXmlCollection = jobListXmlCollection;
				// permitEnableAllBtn();
			}
			
			private function handleCloseEvent():void {
				PopUpManager.removePopUp(this);
			}
			
			protected function uculAddUser_clickHandler(event:MouseEvent):void
			{
				var userAddWindow:UserEditWindow = PopUpManager.createPopUp(this, UserEditWindow, true) as UserEditWindow;
				userAddWindow.parentRef = this;
				userAddWindow.currentUser = (FlexGlobals.topLevelApplication as PinaraUI).currentUser.username;
				userAddWindow = UserUtils.initUserAddWindow(userAddWindow);
				PopUpManager.centerPopUp(userAddWindow);
				userAddWindow.setFocus();
			}
			
			protected function uculEditUser_clickHandler(event:MouseEvent):void
			{
				var userEditWindow:UserEditWindow = PopUpManager.createPopUp(this, UserEditWindow, true) as UserEditWindow;
				userEditWindow.currentUser = (FlexGlobals.topLevelApplication as PinaraUI).currentUser.username;
				userEditWindow = UserUtils.initUserEditWindow(resourceManager, userEditWindow);
				userEditWindow.userDetailXml = currentDataItem;
				PopUpManager.centerPopUp(userEditWindow);
			}
			
			protected function uculDeleteUser_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				
			}
			
			protected function userOpsService_resultHandler(event:ResultEvent):void
			{
				var userListXML:XML;
				
				try {
					// returnXml = XML(event.result);
					userListXML = XML(event.message.body);
				} catch(err:Error) {
					Alert.show("Result : " + err.message);
				}

				userListGrid.userListXmlCollection = new XMLListCollection();
				userListGrid.userListXmlCollection.source = userListXML.children(); 

				//handleCloseEvent();
			}
			
			protected function userOpsService_faultHandler(event:FaultEvent):void
			{
				// TODO Auto-generated method stub
				
			}
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<userops:UserOps id="userOpsService" result="userOpsService_resultHandler(event)" fault="userOpsService_faultHandler(event)" />
	</fx:Declarations>
	
	<s:VGroup paddingLeft="10" paddingTop="10">
		<user:UserListGrid id="userListGrid" creationComplete="pinaraJobListGrid_creationCompleteHandler(event)"/>
		
		<s:BorderContainer y="135" width="100%" height="20%" borderWeight="2" cornerRadius="3" dropShadowVisible="true" backgroundColor="gray">
			<s:HGroup paddingBottom="5" paddingTop="5" paddingLeft="90">
				<s:Button id="uculAddUser" label="{resourceManager.getString('messages', 'uculAddUser')}" click="uculAddUser_clickHandler(event)" /> 
				<s:Button id="uculEditUser" label="{resourceManager.getString('messages', 'uculEditUser')}" click="uculEditUser_clickHandler(event)" enabled="false" /> 
				<s:Button id="uculDeleteUser" label="{resourceManager.getString('messages', 'uculDeleteUser')}" click="uculDeleteUser_clickHandler(event)" enabled="false" /> 
				<s:Button label="{resourceManager.getString('messages', 'uculClose')}" click="handleCloseEvent();"/> 
			</s:HGroup>
		</s:BorderContainer>
	</s:VGroup>
	
</s:TitleWindow> 
