<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 width="100%" height="100%" 
		 xmlns:jobmanager="com.likya.pinara.services.jobmanager.*" 
		 xmlns:jobdetail="com.likya.pinara.comps.jobdetail.*" xmlns:grpmanager="com.likya.pinara.services.grpmanager.*" >
	<fx:Script>
		<![CDATA[
			import com.likya.pinara.event.ResourceEvent;
			import com.likya.pinara.utils.BasicAuthenticationHandler;
			import com.likya.pinara.utils.RoleFilters;
			import com.likya.pinara.utils.Transformer;
			
			import mx.collections.XMLListCollection;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.utils.object_proxy;
			
			import spark.components.Grid;
			import spark.events.GridSelectionEvent;
			
			[Bindable]
			public var jobListXmlCollection:XMLListCollection;
			
			[Bindable]
			public var selectedGroupId:String;
			
			protected function selectionChangeHandlerPinara(event:GridSelectionEvent):void {
				const eventGrid:Grid = event.currentTarget.grid;
				var currentDataItem:Object = eventGrid.selectedItem; 
				dispatchEvent(new ResourceEvent(ResourceEvent.ROW_SELECTION_CHANGED, currentDataItem));
			}
			
			public function getJobCommandType(item:Object, column:GridColumn):String {
				return item.baseJobInfos.jobTypeDetails.jobCommandType;
			}
			
			public function getRealizedDuration(item:Object, column:GridColumn):String {
				return item.runtimeParams.realizedDuration;
			}
			
			protected function grpMngService_resultHandler(event:ResultEvent):void
			{
				BasicAuthenticationHandler.service_resultHandler(this, event);
			}
			
			protected function grpMngService_faultHandler(event:FaultEvent):void
			{
				BasicAuthenticationHandler.service_faultHandler(event);
				
			}
			
			protected function enableAllBtn_clickHandler(event:MouseEvent):void
			{
				BasicAuthenticationHandler.authAndCall(grpMngService, "enablegrp", selectedGroupId);				
				
			}
			
			protected function disableAllBtn_clickHandler(event:MouseEvent):void
			{
				BasicAuthenticationHandler.authAndCall(grpMngService, "disablegrp", selectedGroupId);
				
			}
			
			protected function pinaraJobList_addedToStageHandler(event:Event):void
			{
				mngColumn.visible = RoleFilters.hasOperRole();
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<jobmanager:JobManager id="grpMngService" result="grpMngService_resultHandler(event)" fault="grpMngService_faultHandler(event)"/>
	</fx:Declarations>
		<!-- Define a Button control to open the menu -->
	
	<s:layout>
		<s:VerticalLayout />
	</s:layout>
	
	<s:HGroup>
		<jobdetail:GridStatuFilter data="{jobListXmlCollection}" width="100%" height="20"/>
		<s:Button id="enableAllBtn" label="Enable All Jobs" visible="false" click="enableAllBtn_clickHandler(event)" />
		<s:Button id="disableAllBtn" label="Disable All Jobs" visible="false" click="disableAllBtn_clickHandler(event)" />
	</s:HGroup>
	
	<s:DataGrid id="pinaraJobList" width="100%" height="100%" selectionChange="selectionChangeHandlerPinara(event)" dataProvider="{jobListXmlCollection}" addedToStage="pinaraJobList_addedToStageHandler(event)"> 
		<s:columns>
			<s:ArrayList>
				<s:GridColumn headerText="{resourceManager.getString('messages', 'stateGrid')}" width="{this.pinaraJobList.width * 0.10}">
					<s:itemRenderer>
						<fx:Component>
							<s:GridItemRenderer>
								<s:layout>
									<s:VerticalLayout horizontalAlign="center" verticalAlign="middle"/>
								</s:layout>
								<jobdetail:StateImageItem id="stateImageItem" data="{data}"/>
								<!-- Aşağıdaki kısım yerine yukarıdaki StateImageItem componenti yazıldı-->
								<!--<fx:Script>
									<![CDATA[
										import com.likya.pinara.containers.ImageContainer;
										import com.likya.pinara.containers.ToolTipContainer;
										
										public function mylabelFunc(data:Object):String {
											var liveStateInfo:XML = XMLList(XML(data.stateInfos.LiveStateInfos).children())[0];
											
											var retStr:String = "";
											
											if(liveStateInfo.StateName != "" || liveStateInfo.StateName != null) {
												retStr = liveStateInfo.StateName;
											}

											if(liveStateInfo.SubstateName != "" || liveStateInfo.SubstateName != null) {
												retStr = retStr + "-" + liveStateInfo.SubstateName;
											}
											
											if(liveStateInfo.StatusName != "" || liveStateInfo.StatusName != null) {
												retStr = retStr + "-" + liveStateInfo.StatusName;
											}
											
											return retStr; // XMLList(XML(data.stateInfos.LiveStateInfos).children())[0].StateName;
										}
										
										// {trace('XML : ' + XMLList(XML(data.stateInfos.LiveStateInfos).children())[0].StateName)}
									]]>
								</fx:Script>
								<s:Image source="{ImageContainer.resolveStatus(data)}" toolTip="{ToolTipContainer.getToolTip(data) + ':' + mylabelFunc(data)}"/>-->
								<!--<s:Label text="{mylabelFunc(data)}" fontSize="8" />-->
							</s:GridItemRenderer>
						</fx:Component>
					</s:itemRenderer>
				</s:GridColumn>
				<s:GridColumn headerText="{resourceManager.getString('messages', 'manageGrid')}" width="150" maxWidth="250" id="mngColumn">
					<s:itemRenderer>
						<fx:Component>
							<jobdetail:PinaraJobListGridManageColumn selectedGroupId="{outerDocument.selectedGroupId}" />
						</fx:Component>
					</s:itemRenderer>
				</s:GridColumn>
				<s:GridColumn dataField="@Id" headerText="Job Id" width="{this.pinaraJobList.width * 0.06}">
					<s:itemRenderer>
						<fx:Component>
							<s:DefaultGridItemRenderer textAlign="left" />
						</fx:Component>
					</s:itemRenderer>
				</s:GridColumn>
				<s:GridColumn dataField="baseJobInfos.jsName" headerText="Job Name" width="{this.pinaraJobList.width * 0.10}">
					<s:itemRenderer>
						<fx:Component>
							<s:DefaultGridItemRenderer textAlign="left" />
						</fx:Component>
					</s:itemRenderer>
				</s:GridColumn>
				<s:GridColumn labelFunction="getJobCommandType" headerText="Job Command Type" width="{this.pinaraJobList.width * 0.12}">
					<s:itemRenderer>
						<fx:Component>
							<s:DefaultGridItemRenderer textAlign="left" />
						</fx:Component>
					</s:itemRenderer>
				</s:GridColumn>
				<s:GridColumn dataField="@groupId" headerText="Group Id" width="{this.pinaraJobList.width * 0.10}"/>
				<s:GridColumn labelFunction="Transformer.getRealizedDate" headerText="Son ÇZ" width="{this.pinaraJobList.width * 0.15}"/>
				<s:GridColumn labelFunction="Transformer.getPlannedDate" headerText="Planlanan ÇZ" width="{this.pinaraJobList.width * 0.15}"/>
				<s:GridColumn labelFunction="getRealizedDuration" headerText="Son Çalışma Süresi" width="{this.pinaraJobList.width * 0.10}"/>
			</s:ArrayList>
		</s:columns>
	</s:DataGrid>
</s:Group>
