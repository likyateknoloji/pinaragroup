<?xml version="1.0"?>
<!-- containers\spark\myComponents\MyLoginForm.mxml -->
<s:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:mx="library://ns.adobe.com/flex/mx" 
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   creationComplete="titlewindow1_creationCompleteHandler(event)" 
			   close="handleCloseEvent();" xmlns:jobdetail="com.likya.pinara.comps.jobdetail.*" xmlns:jobcrud="com.likya.pinara.comps.jobcrud.*"
			   title="Job Definition Window" xmlns:jobmanager="com.likya.pinara.services.jobmanager.*">
	<s:layout>
		<s:VerticalLayout/>
	</s:layout>
	
	<fx:Script>
		<![CDATA[
			import com.likya.pinara.comps.DummyForm;
			import com.likya.pinara.utils.ViewToJobXml;
			import com.likya.pinara.utils.JobXmlToView;
			
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			
			
			[Bindable]
			public var jobDetailXml:XML;
			
			private var isEditMode:Boolean = false;
			
			protected function titlewindow1_creationCompleteHandler(event:FlexEvent):void
			{
				if(jobDetailXml != null) {
					isEditMode = true;
					title = "Job Modification Window for JobId :  " + jobDetailXml.@Id;
					// Alert.show("This window is created for edit mode !");
					JobXmlToView.prepare_baseInfoForm(baseInfoForm, jobDetailXml);
					JobXmlToView.prepare_stateInfosForm(stateInfosForm, jobDetailXml);
					// JobXmlToView..prepare_dependencyListForm(dependencyListForm, jobDetailXml);
					JobXmlToView.prepare_managementInfoForm(managementInfoForm, jobDetailXml);
					JobXmlToView.prepare_scheduleInfoForm(scheduleInfoForm, jobDetailXml);
				}
				
			}
			// Handle the close button and Cancel button.
			private function handleCloseEvent():void {
				PopUpManager.removePopUp(this);
			}            
			
			protected function validateAll():Boolean
			{
				return baseInfoForm.validateForm() && stateInfosForm.validateForm() && managementInfoForm.validateForm();
			}
			
			// Handle the OK button.
			private function processSave():void {
				
				if(!validateAll()) {
					return;
				}
				
				// Check credentials (not shown) then remove pop up.
				var myraGenericJob:XML = ViewToJobXml.getXML(this);
				// trace("myXML", myXML.toXMLString());
				Alert.show(myraGenericJob);
				if(isEditMode) {
					jobManagerService.updatejob(myraGenericJob);
				} else {
					jobManagerService.addjob(myraGenericJob);
				}
			}
			
			protected function jobManagerService_faultHandler(event:FaultEvent):void {
				Alert.show("Fault : " + event.message);	
			}
			
			protected function jobManagerService_resultHandler(event:ResultEvent):void {
				
				var returnXml:XML;
				var returnTxt:String = null;
				
				// Alert.show("Result : " + event.message.body);
				
				try {
					// returnXml = XML(event.result);
					returnXml = XML(event.message.body);
					// Alert.show("Result : " + returnXml.toString());
					if(returnXml.result == "NOK") {
						showDummyWindow(returnXml.desc.toString());
					} else {
						PopUpManager.removePopUp(this);
					}
				} catch(err:Error) {
					Alert.show("Result : " + err.message);
					returnTxt = String(event.result)
				}
				
				// Alert.show("Result : " + event.message.body);
				// trace(returnXml);
				
			}
			
			protected function showDummyWindow(xmlText:String):void {
				var dummyWindow:DummyForm = PopUpManager.createPopUp(this, DummyForm, true) as DummyForm;
				dummyWindow.title="Content of the error message..."
				dummyWindow.htmlTextAsHTML = xmlText;
				PopUpManager.centerPopUp(dummyWindow);
				dummyWindow.setFocus();
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<jobmanager:JobManager id="jobManagerService" result="jobManagerService_resultHandler(event)" fault="jobManagerService_faultHandler(event)"/>
		<s:CallResponder id="addJob"/>
		<s:CallResponder id="updateJob"/>
	</fx:Declarations>
	
	<s:VGroup>
		
		<!-- Create a Spark ButtonBar control to navigate 
		the ViewStack container. -->
		<s:TabBar dataProvider="{vs}"/>
		<!-- Define the ViewStack and the three child containers. -->
		
		<mx:ViewStack id="vs" width="100%" height="600" left="8" y="23" creationPolicy="all">
			
			<s:NavigatorContent id="baseInfo" label="Base Information of Job">
				<jobcrud:JobBaseTypeInfoForm id="baseInfoForm"/>
			</s:NavigatorContent>
			<s:NavigatorContent id="stateInfos" label="State Information of Job">
				<jobcrud:StateInfosForm id="stateInfosForm"/>
			</s:NavigatorContent>
			<s:NavigatorContent id="depList" label="Dependency Definitions">
				<jobcrud:DependencyListForm id="dependencyListForm" visible="false"/>
			</s:NavigatorContent>
			<s:NavigatorContent label="Job Management Info"  width="100%" height="100%">
				<s:BorderContainer width="100%" height="100%" borderWeight="2" cornerRadius="3" dropShadowVisible="true">
					<jobcrud:JobManagementInfoForm id="managementInfoForm"/>
				</s:BorderContainer>
			</s:NavigatorContent>
			<s:NavigatorContent label="Job Execution Schedule Info"  width="100%" height="100%">
				<s:BorderContainer width="100%" height="100%" borderWeight="2" cornerRadius="3" dropShadowVisible="true">
					<jobcrud:ScheduleInfoForm  id="scheduleInfoForm"/>
				</s:BorderContainer>
			</s:NavigatorContent>			
		</mx:ViewStack>

		<s:BorderContainer width="100%" height="100%" borderWeight="2" cornerRadius="3" dropShadowVisible="true" backgroundColor="8">
			<s:HGroup paddingBottom="5" paddingTop="5" paddingLeft="300">
				<s:Button label="Save"
						  click="processSave();" /> 
				<s:Button label="Cancel"
						  click="handleCloseEvent();"/> 
			</s:HGroup>
		</s:BorderContainer>
	</s:VGroup>
		
</s:TitleWindow>