<?xml version="1.0" encoding="utf-8"?>
<s:Form xmlns:fx="http://ns.adobe.com/mxml/2009"
		xmlns:s="library://ns.adobe.com/flex/spark"
		xmlns:mx="library://ns.adobe.com/flex/mx"
		xmlns:MyComp="*"
		width="100%" height="100%" creationComplete="updateData()">
	
	<!--
	<fx:Declarations>
	<fx:Model id="tempXML" source="pinara.xml" />
	<s:XMLListCollection id="pinaraXMLList" source="{tempXML.genericJob}" />
	</fx:Declarations>
	-->
 						 
 
	
	<fx:Script>
		<![CDATA[
			import com.likya.pinara.utils.CodeDesc;
			
			import mx.collections.IList;
			import mx.collections.XMLListCollection;
			import mx.controls.Alert;
			import mx.events.ItemClickEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.utils.ObjectUtil;
			
			import spark.events.GridSelectionEvent;
			import spark.events.IndexChangeEvent;
			import spark.events.TextOperationEvent;
			
			private function checkListForItem(checkItem:Object, checkArr:Array):Boolean
			{
				if(checkArr.length > 0) {
					for each (var item:Object in checkArr) {
						var codeDescCuple:CodeDesc = new CodeDesc(String(item));
						if(codeDescCuple.code == Number(checkItem)) {
							//Alert.show("Return code already defined : " + checkItem);
							return true;
						}
					}
				} 
				
				return false;
			}
			
			protected function retCodeEkle_clickHandler(event:MouseEvent):void
			{
				//var myDp:IList = jobList.dataProvider;
				
				var newRecordFlag:Boolean = true;
				
				/*if(!checkListForItem(retCode.text, myDp.toArray())) {
					myDp.addItem(retCode.text + " : " + retCodeDesc.text);
					retCodeCikar.enabled = true;
					retCodeDegistir.enabled = true;
					retCodeList.selectedIndex = myDp.length - 1;
				} else {
					Alert.show("Return code already defined : " + retCode.text);
				}*/
				
			}
			
			protected function retCodeCikar_clickHandler(event:MouseEvent):void
			{
				/*if(jobList.dataProvider.length != 0 && jobList.selectedIndex != -1) {
					jobList.dataProvider.removeItemAt(jobList.selectedIndex);
					if(jobList.dataProvider.length == 0) {
						retCodeCikar.enabled = false;
						retCodeDegistir.enabled = false;
					}
				} else {
					retCodeCikar.enabled = false;
					retCodeDegistir.enabled = false;
				}*/
			}

			protected function retCodeDegistir_clickHandler(event:MouseEvent):void
			{
				//if(jobList.dataProvider.length != 0 && jobList.selectedIndex != -1) {
						//retCodeList.dataProvider.setItemAt(retCode.text + " : " + retCodeDesc.text, retCodeList.selectedIndex);
						//Alert.show("Return code already defined : " + retCode.text);
				//}
			}
			
			protected function retCodeDesc_changeHandler(event:TextOperationEvent):void
			{
				/*if(retCode.text.length > 0 && retCodeDesc.text.length > 0) {
					retCodeEkle.enabled = true;
				} else {
					retCodeEkle.enabled = false;
				}*/
				
			}
			
			protected function retCodeList_changeHandler(event:IndexChangeEvent):void
			{
				/*if(retCodeList.selectedIndex != -1) {
					retCodeCikar.enabled = true;
					retCodeDegistir.enabled = true;
					var codeDescCuple:CodeDesc = new CodeDesc(String(retCodeList.selectedItem));
					retCode.text = "" + codeDescCuple.code;
					retCodeDesc.text = codeDescCuple.desc;
				} else {
					retCodeCikar.enabled = false;
					retCodeDegistir.enabled = false;
				}*/
			}
			
			protected function jobStatusEkle_clickHandler(event:MouseEvent):void
			{
				
				// var statColl:ArrayCollection = new ArrayCollection([
				//	{statusname:jobStatusName.selectedItem, desc:"serkan", 
				//	returnCodeList:[{code: "1", desc: "serkan"}, {code: "2", desc: "serkan2"}]}
				// ]);
				// {[{code: "1", desc: "serkan"}, {code: "2", desc: "serkan2"}]}
				// statusInfoGrid.dataProvider.addItem({statusname:jobStatusName.selectedItem, desc: statusDescription.text, retCodeList:[{code:"rcl1", desc:"rcl2"}]});
				// statusInfoGrid.dataProvider.addItem(statColl);
				
				// Alert.show("retCodeList : " + ObjectUtil.toString(retCodeList.dataProvider));
				
				// var stateArray:Object = {statusname:jobStatusName.selectedItem, desc:statusDescription.text, retCodeList: retCodeList.dataProvider/*new ArrayCollection(["code:a", "desc:b"])*/};
				
/*				if(stateName.selectedIndex == -1 || jobList.dataProvider.length == 0) {
					Alert.show("Status name not selected !");
					return;
				}
				
				for each (var item:Object in dependencyListGrid.dataProvider.toArray()) {
					if(stateName.selectedItem == item.statusname) {
						Alert.show("Status Name already defined : " + item.statusname);
						return;
					}
				}*/
				
				// Alert.show("Column : " + ObjectUtil.toString(statusInfoGrid.dataProvider.toArray()[0]));
				
				// Alert.show("Column : " + statusInfoGrid.columns.getItemIndex(jobStatusName.selectedItem));
					
				//var newDP:Object = ObjectUtil.copy(jobList.dataProvider);
/*				var stateArray:Object = {statusname:stateName.selectedItem, desc:depExp.text, retCodeList:newDP };
*/				
				// dependencyListGrid.dataProvider.addItem(stateArray);
			}
			
			protected function jobStatusCikar_clickHandler(event:MouseEvent):void
			{
				if(dependencyListGrid.dataProvider.length != 0 && dependencyListGrid.selectedIndex != -1) {
					dependencyListGrid.dataProvider.removeItemAt(dependencyListGrid.selectedIndex);
					if(dependencyListGrid.dataProvider.length == 0) {
						jobStatusCikar.enabled = false;
					}
				} else {
					jobStatusCikar.enabled = false;
				}
				
			}
			
			protected function jobStatusDegistir_clickHandler(event:MouseEvent):void
			{
		/*	if(stateName.selectedIndex == -1 || jobList.dataProvider.length == 0) {
					Alert.show("Status name not selected !");
					return;
				}
				
				for each (var item:Object in statusInfoGrid.dataProvider.toArray()) {
					if(jobStatusName.selectedItem == item.statusname) {
						Alert.show("Status Name already defined : " + item.statusname);
						return;
					}
				}
				
				var newDP:Object = ObjectUtil.copy(jobList.dataProvider);
				var stateArray:Object = {statusname:stateName.selectedItem, desc:depExp.text, retCodeList:newDP };
				
				dependencyListGrid.dataProvider.setItemAt(stateArray, dependencyListGrid.selectedIndex);*/
			}
			
			protected function statusInfoGrid_selectionChangeHandler(event:GridSelectionEvent):void
			{
/*				if(dependencyListGrid.selectedIndex != -1) {
					jobStatusCikar.enabled = true;
					jobStatusDegistir.enabled = true;
					// stateName.selectedItem = dependencyListGrid.selectedItem.statusname;
					depExp.text = dependencyListGrid.selectedItem.desc;
					//trace(statusInfoGrid.selectedItem.retCodeList);
					jobList.dataProvider = ObjectUtil.copy(dependencyListGrid.selectedItem.retCodeList) as IList;
					// trace(ObjectUtil.toString(ObjectUtil.copy(statusInfoGrid.selectedItem.retCodeList) as IList));
					jobList.selectedIndex = jobList.dataProvider.length - 1;
					
					if(jobList.selectedIndex != -1) {
						//retCodeCikar.enabled = true;
						//retCodeDegistir.enabled = true;
						var codeDescCuple:CodeDesc = new CodeDesc(String(jobList.selectedItem));
						//retCode.text = "" + codeDescCuple.code;
						//jobList.text = codeDescCuple.desc;
					} 
				} else {
					jobStatusCikar.enabled = false;
					jobStatusDegistir.enabled = false;
				}*/
			}
			
			private function handleSensInfo(event:ItemClickEvent):void {
				if (event.currentTarget.selectedValue == "dep") {
					step.visible = false;
					relative.visible = false;
					lbldel.visible = false;
					lblrel.visible = false;
				} else if (event.currentTarget.selectedValue == "time") {
					step.visible = true;
					relative.visible = true;
					lbldel.visible = true;
					lblrel.visible = true;
				} else {
					Alert.show("You selected Nothing.");
				} 
			}
			
			public function updateData():void {
				// jobListDS.url = "/flex/restsrvc/joblistxml/-1";
				jobListDS.url = "/flex/restsrvc/jobsummarylistxml";
				jobListDS.send();
			}
			
			protected function xmlService_faultHandler(event:FaultEvent):void {
				Alert.show(event.toString());
			}
			
			protected function xmlService_resultHandler(event:ResultEvent):void {
				
				var jobListXml:XML = XML(event.result);
				
				// var treeOpenItems:Object;
				
				// trace(jobListXml);
				
				//var jobListXmlCollection:XMLListCollection = new XMLListCollection();
				
				// jobListXmlCollection.source = jobListXml.children(); 
				
				// Alert.show(jobListXml);
				// jobList.dataProvider = jobListXml.children();
				for each (var job:Object in jobListXml.children()) {
					// trace(job);
					jobList.dataProvider.addItem(job.jobid + ":" + job.jobname);
				}
				
			}
			
			protected function stateName_changeHandler(event:IndexChangeEvent):void
			{
				var data:ArrayCollection = new ArrayCollection();
				
				if(stateName.selectedItem == "PENDING") {
					//substateName.dataProvider = [{"CREATED", "VALIDATED", "IDLED", "DEACTIVATED", "READY", "PAUSED"}];
					
					data = new ArrayCollection(
						[   
							{value:"CREATED"},
							{value:"VALIDATED"},
							{value:"IDLED"},
							{value:"DEACTIVATED"},
							{value:"READY"},
							{value:"PAUSED"}
						]                
					);
					substateName.enabled = true;
					statusName.enabled = true;
				} else if(stateName.selectedItem == "RUNNING") {
					data = new ArrayCollection(
						[   
							{value:"STAGE-IN"},
							{value:"MIGRATING"},
							{value:"ON-RESOURCE"},
							{value:"HELD"},
							{value:"STAGE-OUT"}
						]                
					);
					substateName.enabled = true;
					statusName.enabled = true;
				} else if(stateName.selectedItem == "CANCELLED") {
					data = null;
					substateName.enabled = false;
					statusName.enabled = false;
				} else if(stateName.selectedItem == "FAILED") {
					data = null;
					substateName.enabled = false;
					statusName.enabled = false;
				} else if(stateName.selectedItem == "FINISHED") {
					data = new ArrayCollection(
						[   
							{value:"STOPPED"},
							{value:"SKIPPED"},
							{value:"COMPLETED"},
						]                
					);
					substateName.enabled = true;
					statusName.enabled = true;
				}
				
				substateName.dataProvider = data;
			}
			
			protected function substateName_changeHandler(event:IndexChangeEvent):void
			{
				var data:ArrayCollection = new ArrayCollection();
				
				if(substateName.selectedItem.value == "CREATED") {
					data = new ArrayCollection(
						[   
							{value:"DEVELOPMENT"},
							{value:"TEST"},
							{value:"REQUEST"},
							{value:"DEPLOYED"}
						]                
					);
					statusName.enabled = true;
				} else if(substateName.selectedItem.value == "VALIDATED") {
					data = null;
					statusName.enabled = false;
				} else if(substateName.selectedItem.value == "IDLED") {
					data = new ArrayCollection(
						[   
							{value:"BYTIME"},
							{value:"BYUSER"},
							{value:"BYEVENT"}
						]                
					);
					statusName.enabled = true;
				} else if(substateName.selectedItem.value == "DEACTIVATED") {
					data = null;
					statusName.enabled = false;
				} else if(substateName.selectedItem.value == "READY") {
					data = new ArrayCollection(
						[   
							{value:"LOOKFOR-RESOURCE"},
							{value:"USER-CHOOSE-RESOURCE"},
							{value:"USER-WAITING"},
							{value:"WAITING"},
							{value:"TRANSFERING"}
						]                
					);
					statusName.enabled = true;
				} else if(substateName.selectedItem.value == "PAUSED") {
					data = new ArrayCollection(
						[   
							{value:"BYUSER"}
						]                
					);
					statusName.enabled = true;
				} else if(substateName.selectedItem.value == "STAGE-IN") {
					data = null;
					statusName.enabled = false;
				} else if(substateName.selectedItem.value == "MIGRATING") {
					data = null;
					statusName.enabled = false;
				} else if(substateName.selectedItem.value == "ON-RESOURCE") {
					data = new ArrayCollection(
						[   
							{value:"TIME-IN"},
							{value:"TIME-OUT"}
						]                
					);
					statusName.enabled = true;
				} else if(substateName.selectedItem.value == "HELD") {
					data = null;
					statusName.enabled = false;
				} else if(substateName.selectedItem.value == "STAGE-OUT") {
					data = null;
					statusName.enabled = false;
				} else if(substateName.selectedItem.value == "STOPPED") {
					data = null;
					statusName.enabled = false;
				} else if(substateName.selectedItem.value == "SKIPPED") {
					data = null;
					statusName.enabled = false;
				} else if(substateName.selectedItem.value == "COMPLETED") {
					data = new ArrayCollection(
						[   
							{value:"SUCCESS"},
							{value:"WARNING"},
							{value:"FAILED"}
						]                
					);
					statusName.enabled = true;
				}
				
				statusName.dataProvider = data;
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		
		<s:HTTPService id="jobListDS" 
					   method="GET"
					   showBusyCursor="true"
					   resultFormat="e4x"
					   result="xmlService_resultHandler(event)"
					   fault="xmlService_faultHandler(event)"
					   />
		
		<s:RadioButtonGroup id="sensInfo" itemClick="handleSensInfo(event);"/>
		
	</fx:Declarations>
	
	<s:layout>
		<s:FormLayout gap="1"/>
	</s:layout>  
	
	<s:BorderContainer id="dependencyInfoBox" top="50" width="100%" height="330" borderWeight="2" cornerRadius="3" dropShadowVisible="true" enabled="true">

		<s:Label left="15" top="10" text="Dependency Info" fontSize="14" fontWeight="bold"/>

		<s:VGroup left="15" top="30">

			<s:Label text="Select Ignition Priority" fontSize="12" fontWeight="bold"/>
			<s:FormItem top="5">
				<s:HGroup verticalAlign="baseline">
					<s:RadioButton group="{sensInfo}" 
								   id="dep"
								   value="dep"
								   label="Dependency is first"
								   selected="true"
								   width="130"/>
					<s:RadioButton group="{sensInfo}" 
								   id="time"
								   value="time"
								   label="Wait for time" 
								   width="100"/>
					<s:Label text="Delay" visible="false" id="lbldel"/>
					<s:TextInput id="step" width="100%" visible="false"/>
					<s:Label text="Relative" visible="false" id="lblrel"/>
					<s:DropDownList id="relative" selectedIndex="0" visible="false"> 
						<s:dataProvider>
							<mx:ArrayList>
								<fx:String>true</fx:String>
								<fx:String>false</fx:String>
							</mx:ArrayList>
						</s:dataProvider>
					</s:DropDownList>
				</s:HGroup>
			</s:FormItem>
			
			<s:BorderContainer id="depItemListBox" width="700" height="180" borderWeight="1" cornerRadius="3" dropShadowVisible="true" enabled="true">
				<s:HGroup top="10" gap="-20">
					<s:FormItem> 
						<s:VGroup>
							<s:Label top="10" text="Job List" fontSize="12" fontWeight="bold"/>
							<s:List id="jobList" change="retCodeList_changeHandler(event)" maxHeight="120"> 
								<mx:ArrayCollection />
							</s:List>
						</s:VGroup>
					</s:FormItem>
					
					<s:VGroup>
						<s:HGroup>				
							<s:FormItem label="State" width="140">
								<s:DropDownList id="stateName" width="100" prompt="Select Status" change="stateName_changeHandler(event)"> 
									<s:dataProvider>
										<mx:ArrayList>
											<fx:String>PENDING</fx:String>
											<fx:String>RUNNING</fx:String>
											<fx:String>CANCELLED</fx:String>
											<fx:String>FAILED</fx:String>
											<fx:String>FINISHED</fx:String>
										</mx:ArrayList>
									</s:dataProvider>
								</s:DropDownList>
							</s:FormItem>
							
							<s:FormItem label="Subtate" width="170">
								<s:DropDownList id="substateName" width="110" prompt="Select Status" labelField="value" change="substateName_changeHandler(event)"> 
									<s:dataProvider>
										<mx:ArrayList>
											<!--<fx:String>CREATED</fx:String>
											<fx:String>DEACTIVATED</fx:String>
											<fx:String>VALIDATED</fx:String>
											<fx:String>IDLED</fx:String>
											<fx:String>READY</fx:String>
											<fx:String>PAUSED</fx:String>
											<fx:String>STAGE-IN</fx:String>
											<fx:String>STAGE-OUT</fx:String>
											<fx:String>MIGRATING</fx:String>
											<fx:String>HELD</fx:String>
											<fx:String>ON-RESOURCE</fx:String>
											<fx:String>COMPLETED</fx:String>
											<fx:String>STOPPED</fx:String>
											<fx:String>SKIPPED</fx:String>-->
										</mx:ArrayList>
									</s:dataProvider>
								</s:DropDownList>
							</s:FormItem>
							<s:FormItem label="Status">
								<s:DropDownList id="statusName" width="120" prompt="Select Status" labelField="value"> 
									<s:dataProvider>
										<mx:ArrayList>
											<fx:String>SUCCESS</fx:String>
											<fx:String>WARNING</fx:String>
											<fx:String>FAILED</fx:String>
											<fx:String>LOOKFOR-RESOURCE</fx:String>
											<fx:String>WAITING</fx:String>
											<fx:String>TRANSFERING</fx:String>
											<fx:String>TIME-IN</fx:String>
											<fx:String>TIME-OUT</fx:String>
											<fx:String>USER-CHOOSE-RESOURCE</fx:String>
											<fx:String>USER-WAITING</fx:String>
											<fx:String>BYTIME</fx:String>
											<fx:String>BYUSER</fx:String>
											<fx:String>BYEVENT</fx:String>
											<fx:String>DEVELOPMENT</fx:String>
											<fx:String>TEST</fx:String>
											<fx:String>REQUEST</fx:String>
											<fx:String>DEPLOYED</fx:String>
										</mx:ArrayList>
									</s:dataProvider>
								</s:DropDownList>
							</s:FormItem>
						</s:HGroup>
						<s:VGroup>
							<s:Label text="Comment" fontSize="14" fontWeight="bold"/>
							<s:TextInput id="comment" width="400" change="retCodeDesc_changeHandler(event)"/>
						</s:VGroup>	
					</s:VGroup>
				</s:HGroup>
	</s:BorderContainer>
			
			<s:FormItem label="Dependency Expression">
				<s:TextInput id="depExp" width="300"/>
			</s:FormItem>
			
		</s:VGroup>

		
	</s:BorderContainer>
	
	<s:BorderContainer id="jobStatusInfoListBoxAddRemove" top="50" width="100%" borderWeight="2" cornerRadius="3" dropShadowVisible="true" enabled="true">
		<s:HGroup paddingTop="5" paddingBottom="5" paddingLeft="200">
			<s:Button label="Ekle" id="jobStatusEkle" click="jobStatusEkle_clickHandler(event)" enabled="true"/>
			<s:Button label="Çıkar" id="jobStatusCikar" click="jobStatusCikar_clickHandler(event)" enabled="false"/>
			<s:Button label="Değiştir" id="jobStatusDegistir" click="jobStatusDegistir_clickHandler(event)" enabled="false"/>
		</s:HGroup>
	</s:BorderContainer>
	
	<s:BorderContainer id="dependencyListBox" top="50" width="100%" height="200" borderWeight="2" cornerRadius="3" dropShadowVisible="true" enabled="true">

		<s:Label left="15" top="10" text="Dependency List" fontSize="14" fontWeight="bold"/>
		
		<s:DataGrid id="dependencyListGrid" selectionChange="statusInfoGrid_selectionChangeHandler(event)"  left="15" top="40" variableRowHeight="true" verticalCenter="10" horizontalCenter="0" width="695" height="150" rowHeight="100" >
			<s:columns>
				<s:ArrayList>                    
					<!--
					Simple custom item renderer based on GridItemRenderer and Label.
					Prevent line breaking by setting maxDisplayedLines="1".
					-->
					<s:GridColumn dataField="statusname" headerText="Job Status Name">
						<s:itemRenderer>
							<fx:Component>
								<s:GridItemRenderer>
									<s:Label id="labelDisplay"
											 left="5" top="9" right="5" bottom="5"/>
								</s:GridItemRenderer>
							</fx:Component>
						</s:itemRenderer>
					</s:GridColumn>
					<s:GridColumn dataField="desc" headerText="Status Description">
						<s:itemRenderer>
							<fx:Component>
								<s:GridItemRenderer>
									<s:Label id="labelDisplay"
											 left="5" top="9" right="5" bottom="5"/>
								</s:GridItemRenderer>
							</fx:Component>
						</s:itemRenderer>
					</s:GridColumn>
					<s:GridColumn dataField="retCodeList" headerText="Return Code List" id="listGridCol">
						<s:itemRenderer>
							<fx:Component>
								<s:GridItemRenderer>
									<fx:Script>
										<![CDATA[
											import mx.collections.IList;
											// import mx.controls.Alert;
											// import mx.utils.ObjectUtil;
											
											public function myDataFunc(data:Object):IList {
												// Alert.show("inner : " + ObjectUtil.toString(data));
												return data.retCodeList as IList; 
											}
											
										]]>
									</fx:Script>
									<s:List id="inList" height="40" dataProvider="{myDataFunc(data)}" />
								</s:GridItemRenderer>
							</fx:Component>
						</s:itemRenderer>
					</s:GridColumn>
				</s:ArrayList>
			</s:columns>
			<s:ArrayCollection />
		</s:DataGrid>
	</s:BorderContainer>

</s:Form>
