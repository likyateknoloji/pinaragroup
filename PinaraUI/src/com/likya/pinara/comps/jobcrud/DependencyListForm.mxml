<?xml version="1.0" encoding="utf-8"?>
<s:Form xmlns:fx="http://ns.adobe.com/mxml/2009"
		xmlns:s="library://ns.adobe.com/flex/spark"
		xmlns:mx="library://ns.adobe.com/flex/mx"
		xmlns:MyComp="*"
		width="100%" height="100%" creationComplete="updateData()">
	
	<!--
	<fx:Declarations>
	<fx:Model id="tempXML" source="pinara.xml" />
	<s:XMLListCollection id="pinaraXMLList" source="{tempXML.genericJob}" />
	</fx:Declarations>
	-->
	
	
	
	<fx:Script>
		<![CDATA[
			import com.likya.pinara.utils.SSS;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.ItemClickEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.utils.ObjectUtil;
			
			import spark.events.GridSelectionEvent;
			import spark.events.IndexChangeEvent;
			
			protected function indexOf(label:String, arr:Array):int {
				var count:int = 0;
				for each (var item:Object in arr) {
					if(item.value == label) {
						break;
					}
					count++;
				}
				
				return count;
			}
			
			private function checkGridForItem(checkItem:Object, checkArr:Array):Boolean
			{
				for each (var item:Object in checkArr) {
					if(checkItem == item.depid) {
						return true;
					}
				}
				
				return false;
			}
			
			protected function depEkle_clickHandler(event:MouseEvent):void
			{
				
				if(stateName.selectedIndex == -1 || jobList.selectedIndex == -1) {
					Alert.show("State or job not selected !");
					return;
				}
				
				var jobInfoTmp:String = stateName.selectedItem;
				
				if(substateName.selectedItem != null) {
					jobInfoTmp += ":" + substateName.selectedItem.value;
				}
				
				if(statusName.selectedItem != null) {
					jobInfoTmp += ":" + statusName.selectedItem.value;
				}
				
				for each (var item:Object in dependencyListGrid.dataProvider.toArray()) {
					//trace(ObjectUtil.toString(item));
					
					if(item.jobinfo == jobList.selectedItem && item.stateinfo == jobInfoTmp) {
						Alert.show("Dependency already defined : " + ObjectUtil.toString(item));
						return;
					}
				}

				
				var depIdTmp:String
				var loop:Boolean = true;
				var counter:int = 1;
				
				while(loop) {
					depIdTmp = "dep_" + (dependencyListGrid.dataProvider.length + (counter ++));
					if(!checkGridForItem(depIdTmp, dependencyListGrid.dataProvider.toArray())) {
						loop = false;
					}
				}
				
				var depArray:Object = {depid:depIdTmp, jobinfo:jobList.selectedItem, stateinfo:jobInfoTmp, comment:comment.text };
								
				dependencyListGrid.dataProvider.addItem(depArray);
			}
			
			protected function depDegistir_clickHandler(event:MouseEvent):void
			{
				if(stateName.selectedIndex == -1 || jobList.selectedIndex == -1) {
					Alert.show("State or job not selected !");
					return;
				}
				
				var jobInfoTmp:String = stateName.selectedItem;
				
				if(substateName.selectedItem != null) {
					jobInfoTmp += ":" + substateName.selectedItem.value;
				}
				
				if(statusName.selectedItem != null) {
					jobInfoTmp += ":" + statusName.selectedItem.value;
				}
				
				for each (var item:Object in dependencyListGrid.dataProvider.toArray()) {
					//trace(ObjectUtil.toString(item));
					
					if(item.jobinfo == jobList.selectedItem && item.stateinfo == jobInfoTmp) {
						Alert.show("Dependency already defined : " + ObjectUtil.toString(item));
						return;
					}
				}
				
				var depArray:Object = {depid:dependencyListGrid.selectedItem.depid, jobinfo:jobList.selectedItem, stateinfo:jobInfoTmp, comment:comment.text };
				
				dependencyListGrid.dataProvider.setItemAt(depArray, dependencyListGrid.selectedIndex);
			}
			
			protected function depCikar_clickHandler(event:MouseEvent):void
			{
				if(dependencyListGrid.dataProvider.length != 0 && dependencyListGrid.selectedIndex != -1) {
					dependencyListGrid.dataProvider.removeItemAt(dependencyListGrid.selectedIndex);
					if(dependencyListGrid.dataProvider.length == 0) {
						depCikar.enabled = false;
					}
				} else {
					depCikar.enabled = false;
				}
				
			}
			
			protected function depListGrid_selectionChangeHandler(event:GridSelectionEvent):void
			{
				if(dependencyListGrid.selectedIndex != -1) {
					depCikar.enabled = true;
					depDegistir.enabled = true;
					
					var sssTmp:SSS = new SSS(dependencyListGrid.selectedItem.stateinfo);
					
					stateName.selectedItem = sssTmp.state;
					
					stateName_changeHandler(null);
					if(substateName.dataProvider != null) {
						// trace("Before : " + ObjectUtil.toString(substateName.dataProvider));
						(substateName.dataProvider as ArrayCollection).refresh();
						// trace("After : " + ObjectUtil.toString(substateName.dataProvider));
					}
					
					if(sssTmp.substate != null) {
						substateName.selectedIndex = indexOf(sssTmp.substate, substateName.dataProvider.toArray());
						substateName_changeHandler(null);
						if(statusName.dataProvider != null) {
							(statusName.dataProvider as ArrayCollection).refresh();
						}
					}
					
					if(sssTmp.status != null) {
						statusName.selectedIndex = indexOf(sssTmp.status, statusName.dataProvider.toArray());
					}
					
					
					comment.text = dependencyListGrid.selectedItem.comment;
					
					var itemIdx:int = jobList.dataProvider.getItemIndex(dependencyListGrid.selectedItem.jobinfo);
					
					jobList.selectedIndex = itemIdx;
					
				} else {
					depCikar.enabled = false;
					depDegistir.enabled = false;
				}
			}
			
			private function handleSensInfo(event:ItemClickEvent):void {
				if (event.currentTarget.selectedValue == "dep") {
					step.visible = false;
					relative.visible = false;
					lbldel.visible = false;
					lblrel.visible = false;
				} else if (event.currentTarget.selectedValue == "time") {
					step.visible = true;
					relative.visible = true;
					lbldel.visible = true;
					lblrel.visible = true;
				} else {
					Alert.show("You selected Nothing.");
				} 
			}
			
			public function updateData():void {
				jobListDS.url = "/flex/restsrvc/jobsummarylistxml";
				// jobListDS.send();
			}
			
			protected function xmlService_faultHandler(event:FaultEvent):void {
				Alert.show(event.toString());
			}
			
			protected function xmlService_resultHandler(event:ResultEvent):void {
				
				var jobListXml:XML = XML(event.result);
				
				// var treeOpenItems:Object;
				
				// trace(jobListXml);
				
				//var jobListXmlCollection:XMLListCollection = new XMLListCollection();
				
				// jobListXmlCollection.source = jobListXml.children(); 
				
				// Alert.show(jobListXml);
				// jobList.dataProvider = jobListXml.children();
				for each (var job:Object in jobListXml.children()) {
					// trace(job);
					jobList.dataProvider.addItem(job.jobid + ":" + job.jobname);
				}
				
			}
			
			public function resetList(item:DropDownList):void {
				item.dataProvider = null;
				item.enabled = false;
			}
			
			protected function stateName_changeHandler(event:IndexChangeEvent):void
			{
				var data:ArrayCollection = new ArrayCollection();
				
				if(stateName.selectedItem == "PENDING") {
					//substateName.dataProvider = [{"CREATED", "VALIDATED", "IDLED", "DEACTIVATED", "READY", "PAUSED"}];
					
					data = new ArrayCollection(
						[   
							{value:"CREATED"},
							{value:"VALIDATED"},
							{value:"IDLED"},
							{value:"DEACTIVATED"},
							{value:"READY"},
							{value:"PAUSED"}
						]                
					);
					substateName.enabled = true;
					resetList(statusName);
				} else if(stateName.selectedItem == "RUNNING") {
					data = new ArrayCollection(
						[   
							{value:"STAGE-IN"},
							{value:"MIGRATING"},
							{value:"ON-RESOURCE"},
							{value:"HELD"},
							{value:"STAGE-OUT"}
						]                
					);
					substateName.enabled = true;
					resetList(statusName);
				} else if(stateName.selectedItem == "CANCELLED") {
					data = null;
					substateName.enabled = false;
					resetList(statusName);
				} else if(stateName.selectedItem == "FAILED") {
					data = null;
					substateName.enabled = false;
					resetList(statusName);
				} else if(stateName.selectedItem == "FINISHED") {
					data = new ArrayCollection(
						[   
							{value:"STOPPED"},
							{value:"SKIPPED"},
							{value:"COMPLETED"},
						]                
					);
					substateName.enabled = true;
					resetList(statusName);
				}
				
				substateName.dataProvider = data;
			}
			
			protected function substateName_changeHandler(event:IndexChangeEvent):void
			{
				var data:ArrayCollection = new ArrayCollection();
				
				if(substateName.selectedItem.value == "CREATED") {
					data = new ArrayCollection(
						[   
							{value:"DEVELOPMENT"},
							{value:"TEST"},
							{value:"REQUEST"},
							{value:"DEPLOYED"}
						]                
					);
					statusName.enabled = true;
				} else if(substateName.selectedItem.value == "VALIDATED") {
					data = null;
					statusName.enabled = false;
				} else if(substateName.selectedItem.value == "IDLED") {
					data = new ArrayCollection(
						[   
							{value:"BYTIME"},
							{value:"BYUSER"},
							{value:"BYEVENT"}
						]                
					);
					statusName.enabled = true;
				} else if(substateName.selectedItem.value == "DEACTIVATED") {
					data = null;
					statusName.enabled = false;
				} else if(substateName.selectedItem.value == "READY") {
					data = new ArrayCollection(
						[   
							{value:"LOOKFOR-RESOURCE"},
							{value:"USER-CHOOSE-RESOURCE"},
							{value:"USER-WAITING"},
							{value:"WAITING"},
							{value:"TRANSFERING"}
						]                
					);
					statusName.enabled = true;
				} else if(substateName.selectedItem.value == "PAUSED") {
					data = new ArrayCollection(
						[   
							{value:"BYUSER"}
						]                
					);
					statusName.enabled = true;
				} else if(substateName.selectedItem.value == "STAGE-IN") {
					data = null;
					statusName.enabled = false;
				} else if(substateName.selectedItem.value == "MIGRATING") {
					data = null;
					statusName.enabled = false;
				} else if(substateName.selectedItem.value == "ON-RESOURCE") {
					data = new ArrayCollection(
						[   
							{value:"TIME-IN"},
							{value:"TIME-OUT"}
						]                
					);
					statusName.enabled = true;
				} else if(substateName.selectedItem.value == "HELD") {
					data = null;
					statusName.enabled = false;
				} else if(substateName.selectedItem.value == "STAGE-OUT") {
					data = null;
					statusName.enabled = false;
				} else if(substateName.selectedItem.value == "STOPPED") {
					data = null;
					statusName.enabled = false;
				} else if(substateName.selectedItem.value == "SKIPPED") {
					data = null;
					statusName.enabled = false;
				} else if(substateName.selectedItem.value == "COMPLETED") {
					data = new ArrayCollection(
						[   
							{value:"SUCCESS"},
							{value:"WARNING"},
							{value:"FAILED"}
						]                
					);
					statusName.enabled = true;
				}
				
				statusName.dataProvider = data;
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		
		<s:HTTPService id="jobListDS" 
					   method="GET"
					   showBusyCursor="true"
					   resultFormat="e4x"
					   result="xmlService_resultHandler(event)"
					   fault="xmlService_faultHandler(event)"
					   />
		
		<s:RadioButtonGroup id="sensInfo" itemClick="handleSensInfo(event);"/>
		
	</fx:Declarations>
	
	<s:layout>
		<s:FormLayout gap="1"/>
	</s:layout>  
	
	<s:BorderContainer id="dependencyInfoBox" top="50" width="100%" height="570" borderWeight="2" cornerRadius="3" dropShadowVisible="true" enabled="true">
		
		<s:Label left="15" top="10" text="Dependency Info" fontSize="14" fontWeight="bold"/>
		
		<s:VGroup left="15" top="30">
			
			<s:Label text="Select Ignition Priority" fontSize="12" fontWeight="bold"/>
			<s:FormItem top="5">
				<s:HGroup verticalAlign="baseline">
					<s:RadioButton group="{sensInfo}" 
								   id="dep"
								   value="dep"
								   label="Dependency is first"
								   selected="true"
								   width="130"/>
					<s:RadioButton group="{sensInfo}" 
								   id="time"
								   value="time"
								   label="Wait for time" 
								   width="100"/>
					<s:Label text="Delay" visible="false" id="lbldel"/>
					<s:TextInput id="step" width="100%" visible="false"/>
					<s:Label text="Relative" visible="false" id="lblrel"/>
					<s:DropDownList id="relative" selectedIndex="0" visible="false"> 
						<s:dataProvider>
							<mx:ArrayList>
								<fx:String>true</fx:String>
								<fx:String>false</fx:String>
							</mx:ArrayList>
						</s:dataProvider>
					</s:DropDownList>
				</s:HGroup>
			</s:FormItem>
			
			<s:BorderContainer id="depItemListBox" width="700" height="120" borderWeight="1" cornerRadius="3" dropShadowVisible="true" enabled="true">
				<s:HGroup top="10" gap="-20">
					<s:FormItem> 
						<s:VGroup>
							<s:Label top="10" text="Job List (id:name)" fontSize="12" fontWeight="bold"/>
							<s:List id="jobList" maxHeight="70"> 
								<mx:ArrayCollection />
							</s:List>
						</s:VGroup>
					</s:FormItem>
					
					<s:VGroup>
						<s:HGroup>				
							<s:FormItem label="State" width="140">
								<s:DropDownList id="stateName" width="110" prompt="Select Status" change="stateName_changeHandler(event)"> 
									<s:dataProvider>
										<mx:ArrayList>
											<fx:String>PENDING</fx:String>
											<fx:String>RUNNING</fx:String>
											<fx:String>CANCELLED</fx:String>
											<fx:String>FAILED</fx:String>
											<fx:String>FINISHED</fx:String>
										</mx:ArrayList>
									</s:dataProvider>
								</s:DropDownList>
							</s:FormItem>
							
							<s:FormItem label="Subtate" width="170">
								<s:DropDownList id="substateName" width="110" prompt="Select Status" labelField="value" change="substateName_changeHandler(event)" enabled="false"> 
									<s:dataProvider>
										<mx:ArrayList>
											<!--<fx:String>CREATED</fx:String>
											<fx:String>DEACTIVATED</fx:String>
											<fx:String>VALIDATED</fx:String>
											<fx:String>IDLED</fx:String>
											<fx:String>READY</fx:String>
											<fx:String>PAUSED</fx:String>
											<fx:String>STAGE-IN</fx:String>
											<fx:String>STAGE-OUT</fx:String>
											<fx:String>MIGRATING</fx:String>
											<fx:String>HELD</fx:String>
											<fx:String>ON-RESOURCE</fx:String>
											<fx:String>COMPLETED</fx:String>
											<fx:String>STOPPED</fx:String>
											<fx:String>SKIPPED</fx:String>-->
										</mx:ArrayList>
									</s:dataProvider>
								</s:DropDownList>
							</s:FormItem>
							<s:FormItem label="Status">
								<s:DropDownList id="statusName" width="120" prompt="Select Status" labelField="value" enabled="false"> 
									<s:dataProvider>
										<mx:ArrayList>
											<!--<fx:String>SUCCESS</fx:String>
											<fx:String>WARNING</fx:String>
											<fx:String>FAILED</fx:String>
											<fx:String>LOOKFOR-RESOURCE</fx:String>
											<fx:String>WAITING</fx:String>
											<fx:String>TRANSFERING</fx:String>
											<fx:String>TIME-IN</fx:String>
											<fx:String>TIME-OUT</fx:String>
											<fx:String>USER-CHOOSE-RESOURCE</fx:String>
											<fx:String>USER-WAITING</fx:String>
											<fx:String>BYTIME</fx:String>
											<fx:String>BYUSER</fx:String>
											<fx:String>BYEVENT</fx:String>
											<fx:String>DEVELOPMENT</fx:String>
											<fx:String>TEST</fx:String>
											<fx:String>REQUEST</fx:String>
											<fx:String>DEPLOYED</fx:String>-->
										</mx:ArrayList>
									</s:dataProvider>
								</s:DropDownList>
							</s:FormItem>
						</s:HGroup>
						<s:VGroup>
							<s:Label text="Comment" fontSize="14" fontWeight="bold"/>
							<s:TextInput id="comment" width="400" />
						</s:VGroup>	
					</s:VGroup>
				</s:HGroup>
			</s:BorderContainer>
			
			
			<s:BorderContainer id="dependencyListBoxAddRemove" top="50" width="100%" borderWeight="2" cornerRadius="3" dropShadowVisible="true" enabled="true">
				<s:HGroup paddingTop="5" paddingBottom="5" paddingLeft="250">
					<s:Button label="Ekle" id="depEkle" click="depEkle_clickHandler(event)" enabled="true"/>
					<s:Button label="Çıkar" id="depCikar" click="depCikar_clickHandler(event)" enabled="false"/>
					<s:Button label="Değiştir" id="depDegistir" click="depDegistir_clickHandler(event)" enabled="false"/>
				</s:HGroup>
			</s:BorderContainer>
			
			<s:BorderContainer id="dependencyListBox" top="50" width="100%" height="200" borderWeight="2" cornerRadius="3" dropShadowVisible="true" enabled="true">
				
				<s:Label left="15" top="10" text="Dependency List" fontSize="14" fontWeight="bold"/>
				
				<s:DataGrid id="dependencyListGrid" selectionChange="depListGrid_selectionChangeHandler(event)"  left="15" top="40" variableRowHeight="true" verticalCenter="10" horizontalCenter="0" width="695" height="150" rowHeight="100" >
					<s:columns>
						<s:ArrayList>                    
							<!--
							Simple custom item renderer based on GridItemRenderer and Label.
							Prevent line breaking by setting maxDisplayedLines="1".
							-->
							<s:GridColumn dataField="depid" headerText="Dependency id">
								<s:itemRenderer>
									<fx:Component>
										<s:GridItemRenderer>
											<s:Label id="labelDisplay"
													 left="5" top="9" right="5" bottom="5"/>
										</s:GridItemRenderer>
									</fx:Component>
								</s:itemRenderer>
							</s:GridColumn>
							<s:GridColumn dataField="jobinfo" headerText="Job id and name">
								<s:itemRenderer>
									<fx:Component>
										<s:GridItemRenderer>
											<s:Label id="labelDisplay"
													 left="5" top="9" right="5" bottom="5"/>
										</s:GridItemRenderer>
									</fx:Component>
								</s:itemRenderer>
							</s:GridColumn>
							<s:GridColumn dataField="stateinfo" headerText="State Substate Status" id="listGridCol">
								<s:itemRenderer>
									<fx:Component>
										<s:GridItemRenderer>
											<s:Label id="labelDisplay"
													 left="5" top="9" right="5" bottom="5"/>
										</s:GridItemRenderer>
									</fx:Component>
								</s:itemRenderer>
							</s:GridColumn>
						</s:ArrayList>
					</s:columns>
					<s:ArrayCollection />
				</s:DataGrid>
			</s:BorderContainer>
			<s:FormItem label="Dependency Expression">
				<s:TextArea id="depExp" width="500" height="80"/>
			</s:FormItem>
		</s:VGroup>
	</s:BorderContainer>

</s:Form>
