<?xml version="1.0" encoding="utf-8"?>
<s:Form xmlns:fx="http://ns.adobe.com/mxml/2009"
		xmlns:s="library://ns.adobe.com/flex/spark"
		xmlns:mx="library://ns.adobe.com/flex/mx"
		xmlns:MyComp="*"
		width="450" height="150" 
		creationComplete="loadJobTypes()">
	
	<!--
	<fx:Declarations>
	<fx:Model id="tempXML" source="pinara.xml" />
	<s:XMLListCollection id="pinaraXMLList" source="{tempXML.genericJob}" />
	</fx:Declarations>
	-->
 						 
	<fx:Script>
		<![CDATA[
			import com.likya.pinara.event.ResourceEvent;
			import com.likya.pinara.model.AppInfo;
			import com.likya.pinara.model.ModelLocator;
			import com.likya.pinara.utils.BasicAuthenticationHandler;
			
			import mx.collections.XMLListCollection;
			import mx.controls.Alert;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import spark.components.Grid;
			import spark.components.NavigatorContent;
			import spark.events.GridSelectionEvent;
			import spark.events.PopUpEvent;
			
			public static const BATCH_PROCESS:String = "BATCH PROCESS"; 
			public static const SHELL_SCRIPT:String = "SHELL SCRIPT"; 
			public static const SYSTEM_COMMAND:String = "SYSTEM COMMAND";
			public static const REMOTE_SHELL:String = "REMOTE SHELL";
			
			private static const BATCH_FILE_EXT:String = ".bat";
			private static var regExPath:RegExp = new RegExp("([abcdefgABCDEFG]:[\\\\/])?([a-zA-Z/\\\\\\.0-9_ \\-])*");
			
			[Bindable] 
			public var appInfo:AppInfo = ModelLocator.getInstance().appInfo;
			
			[Bindable]
			public var dzInfoList:XMLListCollection = new XMLListCollection();
			private var selectedDataIndex:int;
			
			private var jobDzList:XML;
			
			[Bindable]
			public var filterId:String;
			
			// Bu değişkeni aşağıdaki work dir enable edilince kaldır !
			public var jsJobWorkDir:TextInput = new TextInput();
			
			public function validateForm():Boolean
			{
				if(jsName.text == "") {
					// Alert.show("Job Name is not defined !", "Tab Id : " + NavigatorContent(parent.parent.parent.parent.parent.parent).label);
					Alert.show(resourceManager.getString("messages", "jobBaseNameNotDefined"), "Tab Id : " + NavigatorContent(parent.parent.parent).label);
					return false;
				}
				if(jsCommand.text == "") {
					// Alert.show("Job Command is not defined !", "Tab Id : " + NavigatorContent(parent.parent.parent.parent.parent.parent).label);
					Alert.show(resourceManager.getString("messages", "jobBaseCommandNotDefined"), "Tab Id : " + NavigatorContent(parent.parent.parent).label);
					return false;
				}
				if(jsJobType.selectedItem == undefined) {
					Alert.show(resourceManager.getString("messages", "jobBaseTypeNotSelected"), "Tab Id : " + NavigatorContent(parent.parent.parent).label);
					return false;
				}
				if(jsJobType.selectedItem == BATCH_PROCESS) {
					if(!regExPath.test(jsCommand.text) || jsCommand.text.indexOf(BATCH_FILE_EXT) == -1) {
						Alert.show(resourceManager.getString("messages", "jobBaseWinPath"), "Tab Id : " + NavigatorContent(parent.parent.parent).label);
						return false;
					}
				}
				if(dzInfoGrid.dataProvider.toArray() != null && dzInfoGrid.dataProvider.toArray().length > 0) {	
					var dzValidation:Boolean = true; 
					var dzIds:String = "";
					for each (var dzItem:XML in dzInfoGrid.dataProvider.toArray()) {
						if(dzItem.dangerZoneType+"" == "JOB" && filterId == dzItem.dangerZoneId+"") {
							dzValidation = false;
							dzIds = dzIds + "-" + dzItem.dangerZoneId+"";
						} else if(dzItem.dangerZoneType+"" == "GROUP" && jsJobGroup.text == dzItem.dangerZoneId+"") {
							dzValidation = false;
							dzIds = dzIds + "-" + dzItem.dangerZoneId+"";
						}
					}
					
					if(!dzValidation) {
						Alert.show(resourceManager.getString("messages", "dangerZoneIdsNotValid") + dzIds, "Tab Id : " + NavigatorContent(parent.parent.parent).label);
						return false;
					}
			    }
				
				return true;
			}
			
			public function loadJobTypes():void
			{	
				var jobTypesArray:ArrayList = new ArrayList();
				jobTypesArray.addItem(SYSTEM_COMMAND);
				jobTypesArray.addItem(REMOTE_SHELL);
				
				if(appInfo.ostype == AppInfo.OS_UNIX) {
					jobTypesArray.addItem(SHELL_SCRIPT);
					
				} else if(appInfo.ostype == AppInfo.OS_WINDOWS){
					jobTypesArray.addItem(BATCH_PROCESS);
					
				} else {
					jobTypesArray.addItem(BATCH_PROCESS);
					jobTypesArray.addItem(SHELL_SCRIPT);
				}
				
				jsJobType.dataProvider = jobTypesArray;
			}
			
			protected function jsJobTypeSelectionChange(event:Event):void
			{
				dispatchEvent(new ResourceEvent(ResourceEvent.JOB_TYPE_CHANGED, jsJobType.selectedItem));
			}
			
			public function fetchDangerZoneData():void {
				if(filterId != null && !isNaN(Number(filterId))) {
					dzListDS.url = "/flex/restsrvc/jobdzlistxml/" + filterId;
				} else {
					dzListDS.url = "/flex/restsrvc/jobdzlistxml";
				}
				BasicAuthenticationHandler.authAndSend(dzListDS);
			}
			
			protected function xmlService_resultHandler(event:ResultEvent):void {
				jobDzList = XML(event.result);
			}

			protected function xmlService_faultHandler(event:FaultEvent):void {
				Alert.show(event.toString());
			}

			
			private function dzEkle_clickHandler(evt:MouseEvent):void
			{
				var dangerZonePopup:DangerZoneListPopup = new DangerZoneListPopup();
				
				dangerZonePopup.x = evt.stageX + 50;
				dangerZonePopup.y = evt.stageY - 60;
				
				this.width = dangerZonePopup.width + 100;
				this.height = dangerZonePopup.height + 75;
				
				dangerZonePopup.jobDzList.source = jobDzList.children();
				// Add an event handler for the close event to check for 
				// any returned data.
				dangerZonePopup.addEventListener('close', dzSelection_closeHandler);
				dangerZonePopup.open(this, true);
			}
			
			protected function dzSelection_closeHandler(event:PopUpEvent):void {
				// If commit is false, do data is returned.
				if (!event.commit)
					return;
				
				if(!dzInfoList.source.contains(event.data) && !(jsJobGroup.text == XML(event.data).dangerZoneId +"")) {
					dzInfoList.addItem(XML(event.data).copy());
				} else {
					Alert.show("Item has already ben selected or same with Job Group!");
				}
			} 
			
			private function dzCikar_clickHandler(event:Event):void
			{
				dzInfoList.removeItemAt(selectedDataIndex);
				dzCikar.enabled = false;
			}
			
			private function dzGrid_selectionChangeHandler(event:GridSelectionEvent):void
			{
				const eventGrid:Grid = event.currentTarget.grid;
				selectedDataIndex = eventGrid.selectedIndex; 
				dzCikar.enabled = true;
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		
		<s:HTTPService id="dzListDS" 
					   method="POST"
					   showBusyCursor="true"
					   resultFormat="e4x"
					   result="xmlService_resultHandler(event)"
					   fault="xmlService_faultHandler(event)"
					   />
	</fx:Declarations>
	
	<s:layout>
		<s:FormLayout gap="1"/>
	</s:layout>  
	
	<s:FormItem label="{resourceManager.getString('messages', 'jobNameItemLabel')}">
		<s:TextInput id="jsName" width="300"/>
		<s:helpContent>
			<s:Label text="{resourceManager.getString('messages', 'jobNameHelpContentLabel')}" paddingLeft="-50"/>
		</s:helpContent>
	</s:FormItem>

	
	<s:FormItem label="{resourceManager.getString('messages', 'jobCommandItemLabel')}">
		<s:TextInput id="jsCommand" width="300" />
		<s:helpContent>
			<s:Label text="{resourceManager.getString('messages', 'jobCommandHelpContentLabel')}" paddingLeft="-50"/>
		</s:helpContent>
	</s:FormItem>

	<s:FormItem label="{resourceManager.getString('messages', 'jobGroupItemLabel')}">
		<s:TextInput id="jsJobGroup" width="300" />
		<s:helpContent>
			<s:Label text="{resourceManager.getString('messages', 'jobGroupHelpContentLabel')}" paddingLeft="-50"/>
		</s:helpContent>
	</s:FormItem>
	
	<s:HGroup>
		<s:FormItem label="{resourceManager.getString('messages', 'jobTypeItemLabel')}">
			<s:DropDownList id="jsJobType" width="140" prompt="Select Command Type" change="jsJobTypeSelectionChange(event)" selectedIndex="0" enabled="true"/> 
				<!--s:dataProvider>
					<mx:ArrayList>
						<fx:String>BATCH PROCESS</fx:String>
						<fx:String>SHELL SCRIPT</fx:String>
						<fx:String>SYSTEM COMMAND</fx:String>
						<fx:String>REMOTE SHELL</fx:String>
						<fx:String>ETL TOOL JOBS</fx:String>
						<fx:String>SAP</fx:String>
						<fx:String>SAS</fx:String>
						<fx:String>FTP</fx:String>
						<fx:String>FILE PROCESS</fx:String>
						<fx:String>FILE LISTENER</fx:String>
						<fx:String>PROCESS NODE</fx:String>
						<fx:String>DB JOBS</fx:String>
						<fx:String>WEB SERVICE</fx:String>>
					</mx:ArrayList>
				</s:dataProvider>
			</s:DropDownList-->
		</s:FormItem>
		
		<s:FormItem label="{resourceManager.getString('messages', 'jobArgsItemLabel')}"> 
			<s:TextArea id="jsJobArgs" height="25"/>
		</s:FormItem>
	</s:HGroup>
	
	<s:BorderContainer id="dangerZoneSelector" width="670" height="160" borderWeight="1" cornerRadius="3" dropShadowVisible="true">
		<s:HGroup gap="-20">
			<s:VGroup >
				<s:Label paddingLeft="15" paddingTop="10" text="{resourceManager.getString('messages', 'jobDangerZone')}" fontSize="14" fontWeight="bold"/>
				
				<s:HGroup id="dzGridGrp" paddingLeft="15" enabled="true">
					<s:DataGrid id="dzInfoGrid" dataProvider="{dzInfoList}" selectionChange="dzGrid_selectionChangeHandler(event)" width="620" height="80" rowHeight="50" left="20" top="40" variableRowHeight="true" verticalCenter="10" horizontalCenter="0">
						<s:columns>
							<s:ArrayList>                    
								<s:GridColumn dataField="dangerZoneType" headerText="{resourceManager.getString('messages', 'jobDangerZoneType')}" width="{this.dzInfoGrid.width * 0.50}">
									<s:itemRenderer>
										<fx:Component>
											<s:DefaultGridItemRenderer textAlign="left" />
										</fx:Component>
									</s:itemRenderer>
								</s:GridColumn>
								<s:GridColumn dataField="dangerZoneId" headerText="Id" width="{this.dzInfoGrid.width * 0.50}">
									<s:itemRenderer>
										<fx:Component>
											<s:DefaultGridItemRenderer textAlign="left" />
										</fx:Component>
									</s:itemRenderer>
								</s:GridColumn>
							</s:ArrayList>
						</s:columns>
					</s:DataGrid>
				</s:HGroup>		
				
				<s:HGroup id="dzButtonGrp" paddingLeft="240" enabled="true">
					<s:Button label="{resourceManager.getString('messages', 'retCodeAddButLabel')}" id="dzEkle" click="dzEkle_clickHandler(event)" enabled="true"/>
					<s:Button label="{resourceManager.getString('messages', 'retCodeDeleteButLabel')}" id="dzCikar" click="dzCikar_clickHandler(event)" enabled="false"/>
				</s:HGroup>
			</s:VGroup>
		</s:HGroup>
	</s:BorderContainer>	
		
</s:Form>
