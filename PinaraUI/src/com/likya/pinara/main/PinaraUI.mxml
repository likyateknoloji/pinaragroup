<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   xmlns:comps="com.likya.pinara.comps.*"
			   xmlns:containers="com.likya.pinara.containers.*" 
			   xmlns:jobdetail="com.likya.pinara.comps.jobdetail.*"
			   currentState="loggedOutState" 
			   minWidth="955" minHeight="600" creationComplete="application_creationCompleteHandler()">
	
	<fx:Metadata>
		[ResourceBundle("messages")]
	</fx:Metadata>
	
	<s:states>
		<s:State name="loggedOutState"/>
		<s:State name="loggedInState"/>
		<s:State name="jobListState"/>
		<s:State name="jobDetailState"/>
		<s:State name="graphState"/>
		<s:State name="anaSayfaState"/>
	</s:states>
	
	<fx:Script>
		<![CDATA[
			import com.likya.pinara.event.ResourceEvent;
			import com.likya.pinara.model.UserInfo;
			
			import mx.controls.Alert;
			import mx.resources.ResourceBundle;
			import mx.rpc.events.FaultEvent;
			import mx.utils.Base64Encoder;
			
			
			[Bindable]
			private var httpServiceUrl:String = "/flex/restsrvc/joblistxml/";
			
			[Bindable]
			public var currentUser:UserInfo;
			
			public function disablePage():void {
				mainApp.enabled = false;
				mainApp.mouseEnabled = false;
			}
			
			public function enablePage():void {
				mainApp.enabled = true;
				mainApp.mouseEnabled = true;
			}
			
			protected function application_creationCompleteHandler():void {
				
				var myResources:ResourceBundle = new ResourceBundle("en_US","locale\messages");
				myResources.content['TITLE'] = "Pinara Workload Management Application - English Version";
				resourceManager.addResourceBundle(myResources);
				
				
				myResources = new ResourceBundle("tr_TR","locale\messages");
				myResources.content['TITLE'] = "Pınara İş Yükü Yönetim Uygulaması - Türkçe Sürümü";
				resourceManager.addResourceBundle(myResources);
				
				resourceManager.update();
				
				addEventListener(ResourceEvent.LOGIN, checkLogin);
				addEventListener(ResourceEvent.LOGOUT, logout);
				addEventListener(ResourceEvent.CHANGE_LOCALE, changeLocale);
				
				addEventListener(ResourceEvent.LISTNODE_SELECTED, changeState);
				addEventListener(ResourceEvent.JOBNODE_SELECTED, changeState);
				
				addEventListener(ResourceEvent.ANASAYFA, changeState);
				addEventListener(ResourceEvent.REFRESH, refreshContent);
				
				currentUser = new UserInfo();
				
				// currentState = "anaSayfaState";
				currentState = "loggedOutState";
				// currentState = "loggedInState";
				
				
			}
			
			private function refreshContent(event:ResourceEvent):void {
				// Alert.show("Refresh Event cought !...");
				if(currentState == "jobListState") {
					jobListDetail.updateData();
				} else if(currentState == "jobDetailState") {
					allJobDetail.updateData();
				}
				
				jobTree.refreshTree();
			}
			
			private function changeState(event:ResourceEvent):void {
				
				if(event.type == ResourceEvent.LISTNODE_SELECTED) {
					currentState = "jobListState";
					jobListDetail.selectedNetTreeId = String(event.object);
					jobListDetail.updateData();
				} else if(event.type == ResourceEvent.JOBNODE_SELECTED) {
					currentState = "jobDetailState";
					allJobDetail.selectedJobId = String(event.object);
					allJobDetail.updateData();
				} else if(event.type == ResourceEvent.ANASAYFA) {
					// currentState = "loggedInState";
					currentState = "anaSayfaState";
				}
				
				// Alert.show("New State : " + currentState);
			}

			
			private function getLoginDataResultHandler(event:Event):void {
				// Alert.show("event.result : " + event.toString());
				/*
				Alert.show("event.result : " + event.result);
				currentState = "tlosState";
				if (event.result != null) {
					var myColl:ArrayCollection = (ArrayCollection (event.result));
					
					var result:String = myColl.toArray().valueOf()[0].toString();
					
					if (result == "1") {
						dispatchEvent(new ResourceEvent(ResourceEvent.LOGIN));
					} else {
						Alert.show("Kullacını adı ya da şifre hatalı !");
					}
				}
				*/
			}
			
			private function resultFailed(event:FaultEvent):void {
				Alert.show("resultFailed : " + event.message.toString());
			}
			
			private function logoutHttpResult(event:HTTPStatusEvent):void {
				// Do nothing
				trace();
			}
			
			private function httpResult(event:HTTPStatusEvent):void {
				
				// Alert.show(event.toString());
				
				if(event.status == 200) {
					currentState = "loggedInState";
					// Alert.show("Giriş başarılı :)");
				} else if (event.status == 400) {
					Alert.show("Kullacını adı ya da şifre hatalı !");
					currentUser.username = "";
				} else {
					Alert.show("Unexpected Event : " + event.toString());
				}
				
			}
			
			private function securityError(event:SecurityErrorEvent):void {
				Alert.show("securityError : " + event.toString());
			}
			
			private function ioErrorHandler(event:IOErrorEvent):void {
				// Alert.show(event.toString());
				// trace(event.toString());
			}
			
			private function checkLogin(event:ResourceEvent):void {
				// Alert.show("Burada authentacion yapılacak !", "Hata", Alert.OK, this, null, null);
				// authAndSend(UserInfo(event.object));
				doWork(UserInfo(event.object), false);
			}

			private function logout(event:ResourceEvent):void {
				
				currentUser.username = "";
				currentUser.password = "";
				currentState = 'loggedOutState';
				doWork(currentUser, true);
				currentUser = null;
				loginForm.password.text = "";
				application_creationCompleteHandler();
			}
			
			private function doWork(userInfo:UserInfo, islogout:Boolean):void {
				
				try {

					currentUser.username = userInfo.username;
					currentUser.password = userInfo.password;
					
					var req:URLRequest = new URLRequest("/flex/restsrvc/authanticate/");
					req.method = URLRequestMethod.POST;
					req.data = new URLVariables("name=John+Doe");
					
					
					var encoder:Base64Encoder = new Base64Encoder();        
					// encoder.encode("tlos:tlos");
					encoder.encode(userInfo.username + ":" + userInfo.password);
					
					var credsHeader:URLRequestHeader = new URLRequestHeader("Authorization", "Basic " + encoder.toString());
					req.requestHeaders.push(credsHeader);
					
					var loader:URLLoader = new URLLoader();
					loader.addEventListener(Event.COMPLETE, getLoginDataResultHandler); 
					loader.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityError);
					loader.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);
					if(islogout) {
						loader.addEventListener(HTTPStatusEvent.HTTP_STATUS, logoutHttpResult);
					} else {
						loader.addEventListener(HTTPStatusEvent.HTTP_STATUS, httpResult);
					}
					
					loader.load(req);
				
				} catch (e:Error){
					Alert.show("doWork : " + e.message);
				} 
			}
			
			private function changeLocale(event:ResourceEvent):void {
				var locale:String = String(event.object);
				if(resourceManager.localeChain[0] != locale.toString()) {
					resourceManager.localeChain = [locale];
				}
			}
			
			
		]]>
	</fx:Script>

	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		@namespace mx "library://ns.adobe.com/flex/halo";
		@namespace containers "com.likya.pinara.containers.*";
		
		containers|CollapsiblePanel {
			skin-class: ClassReference('com.likya.pinara.skins.CollapsiblePanelSkin');
		}
		
	</fx:Style>
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>

	<s:layout>
		<s:VerticalLayout gap="10" paddingRight="10" paddingLeft="10" paddingTop="10" paddingBottom="20" />
	</s:layout>
	
	<s:Group width="100%" height="100%" includeIn="loggedOutState" >
		<comps:LoginForm id="loginForm" left="381" right="380" top="259" bottom="264" horizontalCenter="0" verticalCenter="-3"/>
	</s:Group>
	
	
	
	<comps:Header userInfo="{currentUser}" excludeFrom="loggedOutState"/>
	
	<s:Group id="mainApp" width="100%" height="100%" excludeFrom="loggedOutState">
		
		<s:layout>
			<s:HorizontalLayout clipAndEnableScrolling="true" paddingRight="0" paddingLeft="0" paddingTop="10" paddingBottom="10" />
		</s:layout>
		
		<comps:TreePanel height="100%" id="jobTree" left="0" right="10" top="0" bottom="0" />
		
		<s:Group width="100%" height="100%">
			<s:layout>
				<s:VerticalLayout clipAndEnableScrolling="true" paddingRight="0" paddingLeft="0" paddingTop="10" paddingBottom="10" />
			</s:layout>
			<comps:MenuBar excludeFrom="loggedOutState" />
			<s:BitmapImage source="@Embed('/images/likya.jpg')" left="0" right="0" top="0" bottom="0" scaleMode="stretch" includeIn="anaSayfaState" />
			<!--mx:SWFLoader width="950" height="500" source="http://www.youtube.com/v/ojASzi1Kb8c" includeIn="loggedInState"/--> 
			<!--comps:MainPanel includeIn="jobListState" height="100%"/-->
			<jobdetail:JobListWithDetails height="100%" excludeFrom="anaSayfaState, jobDetailState, loggedOutState" id="jobListDetail"/>
			<jobdetail:JobAllDetailPanel includeIn="jobDetailState" id="allJobDetail" height="100%"/>
		</s:Group>
		
	</s:Group>

	<comps:Footer excludeFrom="loggedOutState" />	
	
</s:Application>
